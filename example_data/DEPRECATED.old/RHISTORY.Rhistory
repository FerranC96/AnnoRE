load("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/.RData")
View(hsapiens)
setwd("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core")
View(subset)
View(vep_tsv)
View(hsapiens)
View(hsapiens)
View(x)
View(hsapiens)
class(hsapiens)
class(subset)
subset$rsID
hsapiens_haploR <- read.delim("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/hsapiens_haploR.tsv")
View(hsapiens_haploR)
?read.delim
?read.table
?utils
View(hsapiens_haploR)
View(hsapiens_haploR)
View(main_haploR)
main_haploR <- hsapiens_haploR[hsapiens_haploR$is_query_snp == 1,]
View(main_haploR)
View(main_haploR)
View(main_haploR)
View(hsapiens_haploR)
View(main_haploR)
View(subset)
View(x)
View(hsapiens_haploR)
View(vep_output)
vep_output
?merge
?merge.data.frame
merge.data.frame(hsapiens, main_haploR)
row.names(hsapiens)
hsapiens$Existing_variation
hsapiens[hsapiens$Existing_variation[0]]
hsapiens[hsapiens$Existing_variation[1]]
hsapiens[hsapiens$Existing_variation]
hsapiens[hsapiens$Existing_variation,]
for i in main_haploR$rsID{}
for i in main_haploR$rsID{
print("Hit!")
}
main_haploR$rsID
for i in main_haploR$rsID{print("Hit")}
for (i in main_haploR$rsID){print("Hit")}
for (i in main_haploR$rsID)
{
print(main_haploR$rsID[i])}
for (i in main_haploR$rsID)
{
print(main_haploR$rsID[:i])}
for (i in main_haploR$rsID)
{
print(main_haploR$rsID[,:i])}
for (i in main_haploR$rsID)
{
print(main_haploR$rsID[i])}
main_haploR$rsID[1]
main_haploR$rsID[0]
main_haploR$rsID[3]
main_haploR$rsID[64]
main_haploR$rsID[65]
main_haploR$rsID[63]
hsapiens$Existing_variation[64]
hsapiens$Existing_variation[64][1]
row(hsapiens)
for (i in row(hsapiens)){print("Hi")}
count <- 0
for (i in row(hsapiens)){count <- count + 1 print(count)}
for (i in row(hsapiens)){count <- count + 1}{print(count)}
for (i in row(hsapiens)){count <- count + 1{print(count)}}
for (i in row(hsapiens)){count <- count + 1}
count
count <- 0
for (i in row(hsapiens)){count <- count + 1}
count
row(hsapiens)
nrow(hsapiens)
print(i)
for (i in nrow(main_haploR)){
print(main_haploR$rsID[i])
}
print(main_haploR$rsID[0])
print(main_haploR$rsID[1])
print(main_haploR$rsID[172])
for (i in nrow(main_haploR)){
if (main_haploR$rsID[i] == "rs1058399"){
print (i)
}
}
print (main_haploR$rsID[i])
i <- NULL
remove(i)
for (i in nrow(main_haploR)){
if (main_haploR$rsID[i] == "rs1058399"){
print (main_haploR$rsID[i])
}
}
x <- i
remove(count)
remove(i)
remove(x)
#CADDING RSIDS COLUMN TO MODIFIED VEP OUTPUT
#THIS WILL BE USED FOR THE MERGER
View(hsapiens_haploR)
View(main_haploR)
df1 = data.frame(CustomerId=c(1:10),
Hobby = c(rep("sing", 4), rep("pingpong", 3), rep("hiking", 3)),
Product=c(rep("Toaster",3),rep("Phone", 2), rep("Radio",3), rep("Stereo", 2)))
View(df1)
df2 = data.frame(CustomerId=c(2,4,6, 8, 10),State=c(rep("Alabama",2),rep("Ohio",1),   rep("Cal", 2)),
like=c("sing", 'hiking', "pingpong", 'hiking', "sing"))
View(df2)
df3 = merge(df1, df2, by.x=c("CustomerId", "Hobby"), by.y=c("CustomerId", "like"))
View(df3)
df3 = merge(df1, df2, by.x=c("CustomerId", "Hobby"), by.y=c("CustomerId", "like"))
library(dplyr)
df1$Id <- df1$CustomerId
View(df1)
df1$CustomerId <- NULL
View(df1)
df3 <- full_join(df1, df2, by=c("Id", "CustomerId"))
df3 <- full_join(df1, df2, by=c("Id"="CustomerId"))
View(df3)
#TO MERGE TABLES BY IDS!
main_haploR2 <- subset(main_haploR, select = c(rsID, Proteins, eQTL))
View(main_haploR2)
main_haploR2 <- subset(main_haploR, select = c(rsID, Proteins, eQTL, Promoter_histone_marks, Enhancer_histone_marks))
View(main_haploR2)
merged <- left_join(hsapiens, main_haploR2, by=c("Existing_variation"="rsID"))
View(merged)
merged <- left_join(hsapiens, main_haploR2, by=c("X.Uploaded_variation"="rsID"))
View(merged)
merged <- left_join(hsapiens, main_haploR2, by=c("Existing_variation"<="rsID"))
merged <- left_join(hsapiens, main_haploR2, by=c("Existing_variation"="rsID"))
#NOW I JUST NEED EXTRA COLUM WITH RSID IN HSAPIENS!
View(df3)
library("tidyr", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
?separate
library("stringr", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
?mutate
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, "(rs.*?)\,"))
View(hsapiens)
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, "rs\d+(?=\,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\d+(?=\,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,)"))
View(merged)
View(hsapiens)
hsapiens2 <- mutate(hsapiens$rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs/d+(?=/,)"))
hsapiens 2 <- hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs/d+(?=/,)"))
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs/d+(?=/,)"))
View(hsapiens)
hsapiens %>%
dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,)"))
hsapiens2 <- hsapiens %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,)"))
View(hsapiens2)
hsapiens2 <- hsapiens %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,|$"))
hsapiens2 <- hsapiens %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,|$)"))
View(hsapiens2)
View(hsapiens)
View(hsapiens_haploR)
View(main_haploR)
View(main_haploR2)
View(hsapiens2)
merged <- left_join(hsapiens2, main_haploR2, by=c("rsID"))
View(merged)
summary(merged)
View(main_haploR)
View(main_haploR2)
View(main_haploR)
main_haploR2 <- subset(main_haploR, select = c(rsID, chr, Proteins, eQTL, Promoter_histone_marks, Enhancer_histone_marks))
View(main_haploR2)
View(merged)
View(merged)
View(merged)
write.table(merged, file="./output/main_output.tsv", quote=FALSE, sep="\t")
setwd("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core")
write.table(merged, file="./output/main_output.tsv", quote=FALSE, sep="\t")
write.table(merged, file="./output/main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t")
source('~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/merge_data.R')
save.image("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/freezer/OLD_WORKSPACE.RData")
source('~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/merge_data.R')
#FROM HERE ON, WIP
merged <- left_join(vep_output, main_haploR, by=c("rsID"))
View(merged)
source('~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/merge_data.R')
#Loading vep output: In .tsv format with --tab flag, skip to 58 to get only header and table
vep_output <- read.delim("./output/hsapiens.tsv", comment.char="", skip=58)
install.packages("XGR")
install.packages("dnet")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("supraHex")
savehistory("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/freezer/RHISTORY.Rhistory")
