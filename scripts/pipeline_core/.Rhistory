View(merged)
x <- queryHaploreg(file="./output/snp_file.txt", ldThresh = 0.9, timeout = 1000)
library(haploR)
#Change output to tsv or similar
write.table(x, file="./output/OCD_haploR.tsv", quote=FALSE, sep="\t")
View(enrich_results)
enrichment <- xEnricherSNPs(snp_INPUTVECTOR, min.overlap=2, verbose=T, size.range=c(3,2000))
library(XGR)
enrichment <- xEnricherSNPs(snp_INPUTVECTOR, min.overlap=2, verbose=T, size.range=c(3,2000))
enrichment_results <- xEnrichViewer(enrichment, details = T)
View(enrichment_results)
bar_plot <- xEnrichBarplot(enrichment, signature = FALSE)
View(bar_plot)
bar_plot
class(bar_plot)
dot_plot <- xEnrichDotplot(enrichment)
dot_plot
View(bar_plot)
View(snp_file)
saveRDS(bar_plot, file = "./output/Plots/enrich_bar.rds")
saveRDS(dot_plot, file = "./output/Plots/enrich_dot.rds")
?ggsave
ggsave(filename = "./output/Plots/enrich_bar.svg", plot = bar_plot)
library(svglite)
install.packages("svglite")
install.packages("svglite")
library(svglite)
ggsave(filename = "./output/Plots/enrich_bar.svg", plot = bar_plot)
ggsave(filename = "./output/Plots/enrich_dot.rds", plot = dot_plot)
ggsave(filename = "./output/Plots/enrich_dot.svg", plot = dot_plot)
haploR_output <- read.delim("./output/OCD_haploR.tsv", row.names = NULL)
main_haploR <- haploR_output[haploR_output$is_query_snp == 1,]
main_haploR <- subset(main_haploR, select = c(rsID, chr, Proteins, eQTL, Promoter_histone_marks, Enhancer_histone_marks))
vep_output <- read.delim("./output/OCD.tsv", comment.char="", skip=58)
vep_output <- vep_output %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,|$)"))
merged <- left_join(vep_output, main_haploR, by=c("rsID"))
View(merged)
write.table(merged, file="./output/OCD_main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t")
View(main_haploR)
View(vep_output)
?left_join
View(merged)
library(dplyr)
merged_test <- replace_na(merged, list(Proteins = "-", eQTL ="-", Promoter_histone_marks ="-", Enhancer_histone_marks="-"))
install.packages("tidyr")
library(tidyr)
merged_test <- replace_na(merged, list(Proteins = "-", eQTL ="-", Promoter_histone_marks ="-", Enhancer_histone_marks="-"))
View(merged_test)
myList <- setNames(lapply(vector("list", ncol(merged)), function(x) x <- "-"), names(merged))
View(myList)
merged_test <- replace_na(merged, myList)
View(merged_test)
myList <- setNames(lapply(vector("list", ncol(merged)), function(x) x <- -), names(merged))
myList <- setNames(lapply(vector("list", ncol(merged)), function(x) x <- 0), names(merged))
merged_test <- replace_na(merged, myList)
View(merged_test)
?replace
merged_test %>% replace(is.na(.), 0)
View(merged_test)
coalesce(merged_test, 0)
merged_test <- merged[is.na(merged)] = 0
merged_test[is.na(merged)] = 0
View(merged_test)
merged_test[is.na(merged_test)] = 0
View(merged_test)
merged_test[is.na(merged_test)]
merged_test[is.na(merged_test)] <- 0
View(merged_test)
View(myList)
View(merged)
View(myList)
merged
merged
merged_testPLZ <- merged
merged_testPLZ[is.na(merged_testPLZ)] <- 0
View(merged_testPLZ)
myList <- setNames(lapply(vector("list", ncol(merged_testPLZ)), function(x) x <- 0), names(merged_testPLZ))
merged_test <- merged_testPLZ %>% replace_na(myList)
View(merged_test)
?write.table
write.table(merged, file="./output/OCD_main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t", na = "-")
reg_biotype <- regulatory_subset %>%  group_by(BIOTYPE) %>% summarise(counts = n_distinct(X.Uploaded_variation))
regulatory_subset <- subset(regulatory, select = c(X.Uploaded_variation, Location, Feature, Consequence, BIOTYPE, Promoter_histone_marks, Enhancer_histone_marks))
regulatory <- merged[merged$Feature_type == "RegulatoryFeature",]
View(regulatory)
reg_biotype <- regulatory_subset %>%  group_by(BIOTYPE) %>% summarise(counts = n_distinct(X.Uploaded_variation))
regulatory_subset <- subset(regulatory, select = c(X.Uploaded_variation, Location, Feature, Consequence, BIOTYPE, Promoter_histone_marks, Enhancer_histone_marks))
View(regulatory)
View(regulatory_subset)
reg_biotype <- regulatory_subset %>%  group_by(BIOTYPE) %>% summarise(counts = n_distinct(X.Uploaded_variation))
View(reg_biotype)
?ggplot
ggplot(reg_biotype ,aes(x = BIOTYPE, y = counts, fill = BIOTYPE)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Biotype of regulatory feature",
y = "Number of distinct rsIDs",
title = "Test plotting of regulatory features"
)
reg_bio_plot <- ggplot(reg_biotype ,aes(x = BIOTYPE, y = counts, fill = BIOTYPE)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Biotype of regulatory feature",
y = "Number of distinct rsIDs",
title = "Test plotting of regulatory features"
)
View(reg_bio_plot)
reg_bio_plot
saveRDS(reg_bio_plot, file = "./output/Plots/reg_bio.rds")
ggsave(filename = "./output/Plots/reg_bio.svg", plot = reg_bio_plot)
regulatory_subset %>%
group_by(Promoter_histone_marks) %>%
summarise(counts = n_distinct(X.Uploaded_variation))
df <- data.frame(month=rep(1:3,2),
student=rep(c("Amy", "Bob"), each=3),
A=c(9, 7, 6, 8, 6, 9),
B=c(6, 7, 8, 5, 6, 7))
View(df)
View(regulatory_subset)
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks, Enhancer_histone_marks)
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks)
View(reg_phistone)
reg_ehistone <- separate_rows(regulatory_subset, Enhancer_histone_marks)
View(reg_phistone)
View(reg_ehistone)
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks) %>% group_by(Promoter_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
View(reg_phistone)
reg_phist_plot <- ggplot(reg_phistone ,aes(x = Promoter_histone_marks, y = counts, fill = Promoter_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Promoter histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
View(reg_phist_plot)
saveRDS(reg_phist_plot, file = "./output/Plots/reg_phist.rds")
ggsave(filename = "./output/Plots/reg_phist.svg", plot = reg_phist_plot)
class(reg_phistone)
reg_phistone$Promoter_histone_marks
subset(reg_phistone, Promoter_histone_marks!="NA")
reg_phistone <- filter(reg_phistone, Promoter_histone_marks="NA", Promoter_histone_marks="")
View(reg_phistone)
reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
reg_histone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
View(reg_histone_filtered)
reg_histone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="")),]
reg_histone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
reg_phistone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
reg_phist_plot <- ggplot(reg_phistone_filtered ,aes(x = Promoter_histone_marks, y = counts, fill = Promoter_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Promoter histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_phist_plot, file = "./output/Plots/reg_phist.rds")
ggsave(filename = "./output/Plots/reg_phist.svg", plot = reg_phist_plot)
reg_ehistone <- separate_rows(regulatory_subset, Enhancer_histone_marks) %>% group_by(Enhancer_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
reg_ehistone_filtered <- reg_ehistone[(!(reg_ehistone$Enhancer_histone_marks=="NA") & !(reg_histone$Enhancer_histone_marks=="")),]
reg_ehistone_filtered <- reg_ehistone[(!(reg_ehistone$Enhancer_histone_marks=="NA") & !(reg_ehistone$Enhancer_histone_marks=="")),]
reg_ehist_plot <- ggplot(reg_ehistone_filtered ,aes(x = Enhancer_histone_marks, y = counts, fill = Enhancer_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Enhancer histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_ehist_plot, file = "./output/Plots/reg_ehist.rds")
ggsave(filename = "./output/Plots/reg_ehist.svg", plot = reg_ehist_plot)
reg_ehist_plot
write.table(reg_biotype, file="./output/reg_bio.tsv", quote=FALSE, row.names = FALSE, sep="\t")
write.table(reg_biotype, file="./output/summary/reg_bio.tsv", quote=FALSE, row.names = FALSE, sep="\t")
write.table(reg_phistone_filtered, file="./output/reg_phist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
write.table(reg_ehistone_filtered, file="./output/reg_ehist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
save.image("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/freezer/Workspace_before_cleanup.RData")
savehistory("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/freezer/Workspace_before_cleanup.Rhistory")
View(merged_testPLZ)
#Load rsIDs and vectorize for XGR:
snp_file <- read.table("./output/snp_file.txt", quote="\"", comment.char="")
library(XGR)
library(ggplot2)
library(svglite)
#Perform Enrichment
#NOt using SNPs in LD -> Add arg for selecting LD and threshold (-ld X)
#Will be taken by both HaploR and XGR.
#IN XGR transalate as xEnricherSNPs(..., include.LD=c("AFR", "AMR", "EAS", "EUR", "SAS"), LD.r2 = X)
enrichment <- xEnricherSNPs(snp_INPUTVECTOR, min.overlap=2, verbose=T, size.range=c(3,2000))
snp_INPUTVECTOR <- as.vector(snp_file[,1])
#Generate summary tables for Enrichment
write.table(enrichment_results, file="./output/enrichment_summary.tsv", quote=FALSE, row.names = FALSE, sep="\t")
library(XGR)
library(ggplot2)
library(svglite)
#ADD ARGS!!!!
#Load rsIDs and vectorize for XGR:
snp_file <- read.table("./output/snp_file.txt", quote="\"", comment.char="")
snp_INPUTVECTOR <- as.vector(snp_file[,1])
#Perform Enrichment
#NOt using SNPs in LD -> Add arg for selecting LD and threshold (-ld X)
#Will be taken by both HaploR and XGR.
#IN XGR transalate as xEnricherSNPs(..., include.LD=c("AFR", "AMR", "EAS", "EUR", "SAS"), LD.r2 = X)
enrichment <- xEnricherSNPs(snp_INPUTVECTOR, min.overlap=2, verbose=T, size.range=c(3,2000))
enrichment_results <- xEnrichViewer(enrichment, details = T)
#Generate summary tables for Enrichment
write.table(enrichment_results, file="./output/enrichment_summary.tsv", quote=FALSE, row.names = FALSE, sep="\t")
#Producing graphs. Either save as images (most probable) or save for report [future]
bar_plot <- xEnrichBarplot(enrichment, signature = FALSE)
dot_plot <- xEnrichDotplot(enrichment)
saveRDS(bar_plot, file = "./output/Plots/enrich_bar.rds")
saveRDS(dot_plot, file = "./output/Plots/enrich_dot.rds")
ggsave(filename = "./output/Plots/enrich_bar.svg", plot = bar_plot)
ggsave(filename = "./output/Plots/enrich_dot.svg", plot = dot_plot)
library(dplyr)
library(stringr)
library(ggplot2)
library(svglite)
#Loading full haploR ouput
haploR_output <- read.delim("./output/OCD_haploR.tsv", row.names = NULL)
#Working only with input SNPs: Filter out those found in LD
main_haploR <- haploR_output[haploR_output$is_query_snp == 1,]
#select only relevant fields
main_haploR <- subset(main_haploR, select = c(rsID, Proteins, eQTL, Promoter_histone_marks, Enhancer_histone_marks))
#Loading vep output: In .tsv format with --tab flag, skip to 58 to get only header and table
vep_output <- read.delim("./output/OCD.tsv", comment.char="", skip=58)
#Adding new column for rsID so that it can merged with haploR even if user input are coordinates
vep_output <- vep_output %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,|$)"))
merged <- left_join(vep_output, main_haploR, by=c("rsID"))
write.table(merged, file="./output/OCD_main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t", na = "-")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#FROM plotting_and_summary rscript
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#First get reg table from main merged output:
regulatory <- merged[merged$Feature_type == "RegulatoryFeature",]
regulatory_subset <- subset(regulatory, select = c(X.Uploaded_variation, Location, Feature, Consequence, BIOTYPE, Promoter_histone_marks, Enhancer_histone_marks))
#Generating tables and plots:
#Generate pie chart with %of regulatory features vs total!
#Biotype
reg_biotype <- regulatory_subset %>%  group_by(BIOTYPE) %>% summarise(counts = n_distinct(X.Uploaded_variation))
write.table(reg_biotype, file="./output/reg_bio.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_bio_plot <- ggplot(reg_biotype ,aes(x = BIOTYPE, y = counts, fill = BIOTYPE)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Biotype of regulatory feature",
y = "Number of distinct rsIDs",
title = "Test plotting of regulatory features"
)
saveRDS(reg_bio_plot, file = "./output/Plots/reg_bio.rds")
ggsave(filename = "./output/Plots/reg_bio.svg", plot = reg_bio_plot)
#P_histone
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks) %>% group_by(Promoter_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
reg_phistone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
write.table(reg_phistone_filtered, file="./output/reg_phist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_phist_plot <- ggplot(reg_phistone_filtered ,aes(x = Promoter_histone_marks, y = counts, fill = Promoter_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Promoter histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_phist_plot, file = "./output/Plots/reg_phist.rds")
ggsave(filename = "./output/Plots/reg_phist.svg", plot = reg_phist_plot)
#E_histone
reg_ehistone <- separate_rows(regulatory_subset, Enhancer_histone_marks) %>% group_by(Enhancer_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
reg_ehistone_filtered <- reg_ehistone[(!(reg_ehistone$Enhancer_histone_marks=="NA") & !(reg_ehistone$Enhancer_histone_marks=="")),]
write.table(reg_ehistone_filtered, file="./output/reg_ehist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_ehist_plot <- ggplot(reg_ehistone_filtered ,aes(x = Enhancer_histone_marks, y = counts, fill = Enhancer_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Enhancer histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_ehist_plot, file = "./output/Plots/reg_ehist.rds")
ggsave(filename = "./output/Plots/reg_ehist.svg", plot = reg_ehist_plot)
reg_bio_plot
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks) %>% group_by(Promoter_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(svglite)
#Loading full haploR ouput
haploR_output <- read.delim("./output/OCD_haploR.tsv", row.names = NULL)
#Working only with input SNPs: Filter out those found in LD
main_haploR <- haploR_output[haploR_output$is_query_snp == 1,]
#select only relevant fields
main_haploR <- subset(main_haploR, select = c(rsID, Proteins, eQTL, Promoter_histone_marks, Enhancer_histone_marks))
#Loading vep output: In .tsv format with --tab flag, skip to 58 to get only header and table
vep_output <- read.delim("./output/OCD.tsv", comment.char="", skip=58)
#Adding new column for rsID so that it can merged with haploR even if user input are coordinates
vep_output <- vep_output %>% dplyr::mutate(rsID = str_extract(Existing_variation, pattern = "rs\\d+(?=\\,|$)"))
merged <- left_join(vep_output, main_haploR, by=c("rsID"))
write.table(merged, file="./output/OCD_main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t", na = "-")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#FROM plotting_and_summary rscript
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#First get reg table from main merged output:
regulatory <- merged[merged$Feature_type == "RegulatoryFeature",]
regulatory_subset <- subset(regulatory, select = c(X.Uploaded_variation, Location, Feature, Consequence, BIOTYPE, Promoter_histone_marks, Enhancer_histone_marks))
#Generating tables and plots:
#Generate pie chart with %of regulatory features vs total!
#Biotype
reg_biotype <- regulatory_subset %>%  group_by(BIOTYPE) %>% summarise(counts = n_distinct(X.Uploaded_variation))
write.table(reg_biotype, file="./output/reg_bio.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_bio_plot <- ggplot(reg_biotype ,aes(x = BIOTYPE, y = counts, fill = BIOTYPE)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Biotype of regulatory feature",
y = "Number of distinct rsIDs",
title = "Test plotting of regulatory features"
)
saveRDS(reg_bio_plot, file = "./output/Plots/reg_bio.rds")
ggsave(filename = "./output/Plots/reg_bio.svg", plot = reg_bio_plot)
#P_histone
reg_phistone <- separate_rows(regulatory_subset, Promoter_histone_marks) %>% group_by(Promoter_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
reg_phistone_filtered <- reg_phistone[(!(reg_phistone$Promoter_histone_marks=="NA") & !(reg_phistone$Promoter_histone_marks=="")),]
write.table(reg_phistone_filtered, file="./output/reg_phist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_phist_plot <- ggplot(reg_phistone_filtered ,aes(x = Promoter_histone_marks, y = counts, fill = Promoter_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Promoter histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_phist_plot, file = "./output/Plots/reg_phist.rds")
ggsave(filename = "./output/Plots/reg_phist.svg", plot = reg_phist_plot)
#E_histone
reg_ehistone <- separate_rows(regulatory_subset, Enhancer_histone_marks) %>% group_by(Enhancer_histone_marks) %>% summarise(counts = n_distinct(X.Uploaded_variation))
reg_ehistone_filtered <- reg_ehistone[(!(reg_ehistone$Enhancer_histone_marks=="NA") & !(reg_ehistone$Enhancer_histone_marks=="")),]
write.table(reg_ehistone_filtered, file="./output/reg_ehist.tsv", quote=FALSE, row.names = FALSE, sep="\t")
reg_ehist_plot <- ggplot(reg_ehistone_filtered ,aes(x = Enhancer_histone_marks, y = counts, fill = Enhancer_histone_marks)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Enhancer histone marks",
y = "Number of distinct rsIDs",
title = "Tissues from haploR"
)
saveRDS(reg_ehist_plot, file = "./output/Plots/reg_ehist.rds")
ggsave(filename = "./output/Plots/reg_ehist.svg", plot = reg_ehist_plot)
View(main_haploR)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(svglite)
?str_extract
View(merged)
merged <- merged %>% dplyr::mutate(chr = str_extract(Location, pattern = "\\d+(?=\\:)"))
merged <- merged %>% dplyr::mutate(chr = str_extract(Location, pattern = "^.*(?=\\:)"))
write.table(merged, file="./output/OCD_main_output.tsv", quote=FALSE, row.names = FALSE, sep="\t", na = "-")
general_stats <- read.delim("./output/gen_stats.tsv", row.names = NULL)
View(general_stats)
general_stats <- read.delim("./output/gen_stats.tsv")
View(general_stats)
gen_stats <- read.delim("~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/gen_stats.tsv", header=FALSE)
View(gen_stats)
general_stats <- read.delim("./output/gen_stats.tsv", header = FALSE)
View(general_stats)
install.packages("kableExtra")
feature_type <- merged %>% group_by(Feature_type) %>% summarise(counts = n_distinct(X.Uploaded_variation))
View(feature_type)
feature_type$Feature_type[-]
feature_type$Feature_type
View(regulatory)
View(feature_type)
feature_plot <- ggplot(feature_type, aes(x = Feature_Type, y = Counts, fill = Feature_Type)) +
geom_bar(width = 1) +
coord_polar("y")
feature_plot
feature_plot <- ggplot(feature_type, aes(x = feature_type, y = Counts, fill = Feature_Type)) +
geom_bar(width = 1) +
coord_polar("y")
feature_plot
feature_plot <- ggplot(feature_type, aes(x = feature_type, fill = Feature_Type)) +
geom_bar(width = 1) +
coord_polar("y")
feature_plot
View(dot_plot)
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
View(feature_type)
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_Type)) +
geom_bar(width = 1) +
coord_polar("y", start = 0)
feature_plot
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1) +
coord_polar("y", start = 0)
feature_plot
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
feature_plot <- ggplot(feature_type, aes(x ="", fill = Feature_type)) +
geom_bar(width = 1) +
coord_polar("y", start = 0)
feature_plot
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1) +
coord_polar("y", start = 0)
feature_plot
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0)
feature_plot
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "market share") +
guides(fill = guide_legend(reverse = TRUE))
feature_plot
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "market share") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
feature_plot
feature_plot <- ggplot(feature_type, aes(x ="", y=Counts, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "market share") +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(label = paste0(round(Counts), "%")),
position = position_stack(vjust = 0.5)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
feature_plot
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation)) %>% mutate(percent=Counts/sum(Counts)*100.0)
feature_plot <- ggplot(feature_type, aes(x ="", y=percent, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "market share") +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(label = paste0(round(Counts), "%")),
position = position_stack(vjust = 0.5)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
feature_plot
feature_plot <- ggplot(feature_type, aes(x ="", y=percent, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "market share") +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(label = paste0(round(percent), "%")),
position = position_stack(vjust = 0.5)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
feature_plot
feature_type_filtered <- feature_type[!(feature_type$Feature_type == "-"),]
View(feature_type_filtered)
feature_type_filtered <- feature_type[!(feature_type$Feature_type == "-"),] %>% mutate(percent=Counts/sum(Counts)*100.0)
View(feature_type_filtered)
feature_type <- merged %>% group_by(Feature_type) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
feature_type_filtered <- feature_type[!(feature_type$Feature_type == "-"),] %>% mutate(percent=Counts/sum(Counts)*100.0)
feature_plot <- ggplot(feature_type_filtered, aes(x ="", y=percent, fill = Feature_type)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL, title = "Percentage of types of Features identified") +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(label = paste0(round(percent), "%")),
position = position_stack(vjust = 0.5)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
feature_plot
View(merged)
chr_distro <- feature_type <- merged %>% group_by(chr) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
View(chr_distro)
chr_distro <- feature_type <- merged %>% group_by(chr) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
chr_distro_plot <- ggplot(chr_distro_plot ,aes(x = chr, y = Counts, fill = chr)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Chromosome",
y = "Number of variants",
title = "Distribution of variants on chromosomes")
chr_distro <- feature_type <- merged %>% group_by(chr) %>% summarise(Counts = n_distinct(X.Uploaded_variation))
chr_distro_plot <- ggplot(chr_distro,aes(x = chr, y = Counts, fill = chr)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(
x = "Chromosome",
y = "Number of variants",
title = "Distribution of variants on chromosomes")
chr_distro_plot
saveRDS(chr_distro_plot, file = "./output/Plots/chr_distro.rds")
ggsave(filename = "./output/Plots/chr_distro.svg", plot = chr_distro_plot)
View(enrichment_results)
?readRDS
readRDS("./output/Plots/chr_distro.rds")
knit_with_parameters('~/MSc/Project_3/MSc_Project3/scripts/pipeline_core/output/Report/Template.Rmd')
